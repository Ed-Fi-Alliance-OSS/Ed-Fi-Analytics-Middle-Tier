# SPDX-License-Identifier: Apache-2.0
# Licensed to the Ed-Fi Alliance under one or more agreements.
# The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
# See the LICENSE and NOTICES files in the project root for more information.

[CmdLetBinding()]
<#
    .SYNOPSIS
        Automation script for running build operations from the command line.

    .DESCRIPTION
        Provides automation of the following tasks:
        
        * Build: runs `dotnet build` with several implicit steps
          (clean, restore, inject version information).

    .EXAMPLE
        .\build.ps1 build -Configuration Release -Version "2.0.0" -BuildCounter 45

        Overrides the default build configuration (Debug) to build in release
        mode with assembly version 2.0.0.45.
			
	 .EXAMPLE
        .\build.ps1 unittest
        Output: test results displayed in the console and saved to XML files.
		
	 .EXAMPLE
        .\build.ps1 integrationtest
        Output: test results displayed in the console and saved to XML files.
#>
param(
    # Command to execute, defaults to "Build".
    [string]
    [ValidateSet("Clean", "Build", "Publish", "UnitTest", "IntegrationTest")]
    $Command = "Build",

    [switch] $SelfContained,

    # Assembly and package version number, defaults 2.6.1
    [string]
    $Version = "2.6.1",

    # Build counter from the automation tool.
    [string]
    $BuildCounter = "1",

    # .NET project build configuration, defaults to "Debug". Options are: Debug, Release.
    [string]
    [ValidateSet("Debug", "Release")]
    $Configuration = "Debug"
)

$Env:MSBUILDDISABLENODEREUSE = "1"

#$solution = "Application\Ed-Fi-ODS-Tools.sln"
$solutionRoot = "$PSScriptRoot/src"
$maintainers = "Ed-Fi Alliance, LLC and contributors"
	Import-Module -Name "$PSScriptRoot/eng/build-helpers.psm1" -Force
$publishOutputPath = "$solutionRoot/Ed-Fi-Analytics-Middle-Tier/publish/"

function Clean {
    Invoke-Execute { dotnet clean $solutionRoot -c $Configuration --nologo -v minimal }
    if (Test-Path -Path $publishOutputPath) {
        Invoke-Execute { Remove-Item $publishOutputPath*.* }
    }
}

function AssemblyInfo {
    Invoke-Execute {
        $assembly_version = "$Version.$BuildCounter"

        Invoke-RegenerateFile "$solutionRoot/Directory.Build.props" @"
<Project>
    <!-- This file is generated by the build script. -->
    <PropertyGroup>
        <Product>Ed-Fi AMT</Product>
        <Authors>$maintainers</Authors>
        <Company>$maintainers</Company>
        <Copyright>Copyright Â© 2016 Ed-Fi Alliance</Copyright>
        <VersionPrefix>$assembly_version</VersionPrefix>
        <VersionSuffix></VersionSuffix>
    </PropertyGroup>
</Project>

"@
    }
}

function Compile {
    Invoke-Execute {
        dotnet --info
        dotnet build $solutionRoot -c $Configuration --nologo
    }
}

function Publish {
    Invoke-Execute {
        $project = "$solutionRoot/EdFi.AnalyticsMiddleTier.Console"
		
        if ($SelfContained) {
            Write-Host "Self contained." -ForegroundColor Cyan
            dotnet publish $project -c $Configuration /p:EnvironmentName=Production -o $publishOutputPath --self-contained -r win10-x64 --no-build --nologo
        }
        else {
            Write-Host "Not self contained." -ForegroundColor Cyan
            dotnet publish $project -c $Configuration /p:EnvironmentName=Production -o $publishOutputPath --no-self-contained --no-build --nologo
        }
    }
}

function RunTests {
    param (
        # File search filter
        [string]
        $Filter,
		[string]
        $Category
    )

    $testAssemblyPath = "$solutionRoot/$Filter/bin/$Configuration/"
    $testAssemblies = Get-ChildItem -Path $testAssemblyPath -Filter "$Filter.dll" -Recurse

    if ($testAssemblies.Length -eq 0) {
        Write-Host "no test assemblies found in $testAssemblyPath"
    }

    $testAssemblies | ForEach-Object {
        Write-Host "Executing: dotnet test $($_)"
        Invoke-Execute { dotnet test --filter Category=$Category $_ }
    }
}

function UnitTests {
    Invoke-Execute { RunTests -Filter "EdFi.AnalyticsMiddleTier.Tests" -Category UnitTest}
}

function IntegrationTests {
    Invoke-Execute { RunTests -Filter "EdFi.AnalyticsMiddleTier.Tests" -Category IntegrationTest}
}

function Invoke-Build {
    Write-Host "Building Version $Version" -ForegroundColor Cyan
    Invoke-Step { Clean }
    Invoke-Step { AssemblyInfo }
    Invoke-Step { Compile }
}

function Invoke-Publish {
    Invoke-Build
    Invoke-Step { Publish }
}

function Invoke-Clean {
    Invoke-Step { Clean }
}

function Invoke-UnitTests {
    Invoke-Step { UnitTests }
}

function Invoke-IntegrationTests {
    Invoke-Step { IntegrationTests }
}

Invoke-Main {
    switch ($Command) {
        Clean { Invoke-Clean }
        Build { Invoke-Build }
        Publish { Invoke-Publish }
        UnitTest { Invoke-UnitTests }
		IntegrationTest { Invoke-IntegrationTests }
        default { throw "Command '$Command' is not recognized" }
    }
}